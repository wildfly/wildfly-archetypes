<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>\${groupId}</groupId>
    <artifactId>\${artifactId}</artifactId>
    <version>\${version}</version>
    <packaging>jar</packaging>

    <name>\${name}</name>

    <description>This is your WildFly subsystem</description>


    <properties>
        <version.wildfly.core>${version.wildfly.core}</version.wildfly.core>
        <!--Stay with JUnit 4, as "org.wildfly.core:wildfly-subsystem-test-framework" does not support JUnit 5-->
        <version.junit>${version.junit4}</version.junit>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <module.name>\${module}</module.name>


        <!-- other plugin versions -->
        <version.compiler.plugin>${version.compiler.plugin}</version.compiler.plugin>
        <version.surefire.plugin>${version.surefire.plugin}</version.surefire.plugin>
        <version.antrun.plugin>${version.antrun.plugin}</version.antrun.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.release>${maven.compiler.release}</maven.compiler.release>
    </properties>

    <!--
    Repositories are defined in the order that they should be used.
    (1) Maven central, (2) JBoss community
    By default maven central is used last, so it is redefined here to
    force it to be used first.
    -->
    <repositories>
        <repository>
            <id>central</id>
            <name>Main Apache Maven Repository</name>
            <url>https://repo.maven.apache.org/maven2/</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </repository>
        <repository>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <updatePolicy>never</updatePolicy>
            </snapshots>
            <id>jboss-public-repository-group</id>
            <name>JBoss Public Repository Group</name>
            <url>https://repository.jboss.org/nexus/content/groups/public/</url>
            <layout>default</layout>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Main Apache Maven Repository</name>
            <url>https://repo.maven.apache.org/maven2/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <releases>
            </releases>
            <snapshots>
            </snapshots>
            <id>jboss-public-repository-group</id>
            <name>JBoss Public Repository Group</name>
            <url>https://repository.jboss.org/nexus/content/groups/public/</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <!-- Maven will append the version to the finalName (which is the name
           given to the generated war, and hence the context root) -->
        <finalName>\${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>\${version.compiler.plugin}</version>
                <configuration>
                    <source>\${maven.compiler.release}</source>
                    <target>\${maven.compiler.release}</target>
                    <!-- put your configurations here -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>\${version.surefire.plugin}</version>
                <!--
                <configuration>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <enableAssertions>true</enableAssertions>
                    <argLine>-Xmx512m</argLine>
                    <systemProperties>
                        <property>
                            <name>jboss.home</name>
                            <value>${jboss.home}</value>
                        </property>
                    </systemProperties>
                    <includes>
                        <include>**/*TestCase.java</include>
                    </includes>
                    <forkMode>once</forkMode>
                </configuration> -->
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <inherited>false</inherited>
                <version>\${version.antrun.plugin}</version>
                <executions>
                    <execution>
                        <id>build-dist</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <target>
                                <!-- Replace the '.' in ${module.name} with '/' to get its path  -->
                                <tempfile property="temp.file"/>
                                <echo message="${module.name}" file="${temp.file}"/>
                                <replace file="${temp.file}" token="." value="/"/>
                                <loadfile srcfile="${temp.file}" property="module.path"/>
                                <delete file="${temp.file}"/>

                                <delete dir="target/module"/>
                                <property name="module.dir" value="target/module/${module.path}/main"/>

                                <copy file="src/main/resources/module/main/module.xml" tofile="${module.dir}/module.xml"/>
                                <copy file="target/\${project.artifactId}.jar" todir="${module.dir}/"/>
                                <echo>Module ${module.name} has been created in the target/module directory. Copy to your WildFly installation.</echo>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.wildfly.core</groupId>
                <artifactId>wildfly-subsystem</artifactId>
                <version>\${version.wildfly.core}</version>
            </dependency>
            <dependency>
                <groupId>org.wildfly.core</groupId>
                <artifactId>wildfly-subsystem-test</artifactId>
                <type>pom</type>
                <scope>test</scope>
                <version>\${version.wildfly.core}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <scope>test</scope>
                <version>\${version.junit}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-subsystem</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-subsystem-test</artifactId>
            <type>pom</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>
